datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Post {
  id        Int     @id @default(autoincrement())
  title     String
  content   String?
  published Boolean @default(false)
  author    User?   @relation(fields: [authorId], references: [id])
  authorId  Int?
}

model User {
  id              Int       @id @default(autoincrement())
  email           String    @unique
  name            String?
  posts           Post[]
  blogs           Blog[]
  files           File[]
  events          Event[]
  eventSeries     EventSerie[]
  eventOccurences EventOccurence[]
  auths           UserAuth[]
  level           UserLevel @relation(fields: [levelId], references: [id])
  levelId         Int
  password        String
}

model UserLevel {
  id    Int    @id @default(autoincrement())
  name  String
  users User[]
}

model UserAuth {
  id     Int      @id @default(autoincrement())
  userId Int
  user   User     @relation(fields: [userId], references: [id])
  expire DateTime
  token  String   @unique
  ip     String
}

model Blog {
  id       Int           @id @default(autoincrement())
  authorId Int
  author   User          @relation(fields: [authorId], references: [id])
  slug     String        @unique
  title    String
  body     String
  files    MapBlogFile[]
  sections BlogSection[]
}

model BlogSection {
  id     Int    @id @default(autoincrement())
  order  Int
  model  String
  json   String
  blogId Int
  blog   Blog   @relation(fields: [blogId], references: [id])
}

model File {
  id              Int    @id @default(autoincrement())
  path            String
  url             String
  authorId        Int
  author          User   @relation(fields: [authorId], references: [id])
  blogs           MapBlogFile[]
  events          MapEventFile[]
  eventSeries     MapEventSerieFile[]
  eventOccurences MapEventOccurenceFile[]
}

model Event {
  id       Int      @id @default(autoincrement())
  authorId Int
  author   User     @relation(fields: [authorId], references: [id])
  title    String
  body     String
  start    DateTime
  end      DateTime
  files    MapEventFile[]
}

model EventSerie {
  id         Int               @id @default(autoincrement())
  authorId   Int
  author     User              @relation(fields: [authorId], references: [id])
  title      String
  body       String
  occurences EventOccurence[]
  files      MapEventSerieFile[]
}

model EventOccurence {
  id       Int        @id @default(autoincrement())
  authorId Int
  author   User       @relation(fields: [authorId], references: [id])
  body     String
  start    DateTime
  end      DateTime
  serieId  Int
  serie    EventSerie @relation(fields: [serieId], references: [id])
  files    MapEventOccurenceFile[]
}

model MapBlogFile {
  id      Int  @id @default(autoincrement())
  blogId  Int
  blog    Blog @relation(fields: [blogId], references: [id])
  fileId  Int
  file    File @relation(fields: [fileId], references: [id])
}

model MapEventFile {
  id      Int   @id @default(autoincrement())
  eventId Int
  event   Event @relation(fields: [eventId], references: [id])
  fileId  Int
  file    File  @relation(fields: [fileId], references: [id])
}

model MapEventSerieFile {
  id           Int        @id @default(autoincrement())
  eventSerieId Int
  eventSerie   EventSerie @relation(fields: [eventSerieId], references: [id])
  fileId       Int
  file         File       @relation(fields: [fileId], references: [id])
}

model MapEventOccurenceFile {
  id               Int            @id @default(autoincrement())
  eventOccurenceId Int
  eventOccurence   EventOccurence @relation(fields: [eventOccurenceId], references: [id])
  fileId           Int
  file             File           @relation(fields: [fileId], references: [id])
}
